(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{"+wdc":function(t,n,a){"use strict";
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var e,i,r,o,s;if(Object.defineProperty(n,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,l=null,c=function(){if(null!==u)try{var t=n.unstable_now();u(!0,t),u=null}catch(t){throw setTimeout(c,0),t}},d=Date.now();n.unstable_now=function(){return Date.now()-d},e=function(t){null!==u?setTimeout(e,0,t):(u=t,setTimeout(c,0))},i=function(t,n){l=setTimeout(t,n)},r=function(){clearTimeout(l)},o=function(){return!1},s=n.unstable_forceFrameRate=function(){}}else{var f=window.performance,p=window.Date,h=window.setTimeout,v=window.clearTimeout;if("undefined"!=typeof console){var y=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof y&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof f&&"function"==typeof f.now)n.unstable_now=function(){return f.now()};else{var b=p.now();n.unstable_now=function(){return p.now()-b}}var m=!1,g=null,w=-1,x=5,O=0;o=function(){return n.unstable_now()>=O},s=function(){},n.unstable_forceFrameRate=function(t){0>t||125<t?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):x=0<t?Math.floor(1e3/t):5};var P=new MessageChannel,T=P.port2;P.port1.onmessage=function(){if(null!==g){var t=n.unstable_now();O=t+x;try{g(!0,t)?T.postMessage(null):(m=!1,g=null)}catch(t){throw T.postMessage(null),t}}else m=!1},e=function(t){g=t,m||(m=!0,T.postMessage(null))},i=function(t,a){w=h((function(){t(n.unstable_now())}),a)},r=function(){v(w),w=-1}}function k(t,n){var a=t.length;t.push(n);t:for(;;){var e=Math.floor((a-1)/2),i=t[e];if(!(void 0!==i&&0<E(i,n)))break t;t[e]=n,t[a]=i,a=e}}function j(t){return void 0===(t=t[0])?null:t}function _(t){var n=t[0];if(void 0!==n){var a=t.pop();if(a!==n){t[0]=a;t:for(var e=0,i=t.length;e<i;){var r=2*(e+1)-1,o=t[r],s=r+1,u=t[s];if(void 0!==o&&0>E(o,a))void 0!==u&&0>E(u,o)?(t[e]=u,t[s]=a,e=s):(t[e]=o,t[r]=a,e=r);else{if(!(void 0!==u&&0>E(u,a)))break t;t[e]=u,t[s]=a,e=s}}}return n}return null}function E(t,n){var a=t.sortIndex-n.sortIndex;return 0!==a?a:t.id-n.id}var C=[],L=[],A=1,S=null,z=3,R=!1,I=!1,M=!1;function U(t){for(var n=j(L);null!==n;){if(null===n.callback)_(L);else{if(!(n.startTime<=t))break;_(L),n.sortIndex=n.expirationTime,k(C,n)}n=j(L)}}function q(t){if(M=!1,U(t),!I)if(null!==j(C))I=!0,e(F);else{var n=j(L);null!==n&&i(q,n.startTime-t)}}function F(t,a){I=!1,M&&(M=!1,r()),R=!0;var e=z;try{for(U(a),S=j(C);null!==S&&(!(S.expirationTime>a)||t&&!o());){var s=S.callback;if(null!==s){S.callback=null,z=S.priorityLevel;var u=s(S.expirationTime<=a);a=n.unstable_now(),"function"==typeof u?S.callback=u:S===j(C)&&_(C),U(a)}else _(C);S=j(C)}if(null!==S)var l=!0;else{var c=j(L);null!==c&&i(q,c.startTime-a),l=!1}return l}finally{S=null,z=e,R=!1}}function B(t){switch(t){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var N=s;n.unstable_ImmediatePriority=1,n.unstable_UserBlockingPriority=2,n.unstable_NormalPriority=3,n.unstable_IdlePriority=5,n.unstable_LowPriority=4,n.unstable_runWithPriority=function(t,n){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var a=z;z=t;try{return n()}finally{z=a}},n.unstable_next=function(t){switch(z){case 1:case 2:case 3:var n=3;break;default:n=z}var a=z;z=n;try{return t()}finally{z=a}},n.unstable_scheduleCallback=function(t,a,o){var s=n.unstable_now();if("object"==typeof o&&null!==o){var u=o.delay;u="number"==typeof u&&0<u?s+u:s,o="number"==typeof o.timeout?o.timeout:B(t)}else o=B(t),u=s;return t={id:A++,callback:a,priorityLevel:t,startTime:u,expirationTime:o=u+o,sortIndex:-1},u>s?(t.sortIndex=u,k(L,t),null===j(C)&&t===j(L)&&(M?r():M=!0,i(q,u-s))):(t.sortIndex=o,k(C,t),I||R||(I=!0,e(F))),t},n.unstable_cancelCallback=function(t){t.callback=null},n.unstable_wrapCallback=function(t){var n=z;return function(){var a=z;z=n;try{return t.apply(this,arguments)}finally{z=a}}},n.unstable_getCurrentPriorityLevel=function(){return z},n.unstable_shouldYield=function(){var t=n.unstable_now();U(t);var a=j(C);return a!==S&&null!==S&&null!==a&&null!==a.callback&&a.startTime<=t&&a.expirationTime<S.expirationTime||o()},n.unstable_requestPaint=N,n.unstable_continueExecution=function(){I||R||(I=!0,e(F))},n.unstable_pauseExecution=function(){},n.unstable_getFirstCallbackNode=function(){return j(C)},n.unstable_Profiling=null},"16Al":function(t,n,a){"use strict";var e=a("WbBG");function i(){}function r(){}r.resetWarningCache=i,t.exports=function(){function t(t,n,a,i,r,o){if(o!==e){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function n(){return t}t.isRequired=t;var a={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:n,element:t,elementType:t,instanceOf:n,node:t,objectOf:n,oneOf:n,oneOfType:n,shape:n,exact:n,checkPropTypes:r,resetWarningCache:i};return a.PropTypes=a,a}},"17x9":function(t,n,a){t.exports=a("16Al")()},"2mql":function(t,n,a){"use strict";var e=a("TOwV"),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},r={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},o={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function u(t){return e.isMemo(t)?o:s[t.$$typeof]||i}s[e.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var l=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;t.exports=function t(n,a,e){if("string"!=typeof a){if(h){var i=p(a);i&&i!==h&&t(n,i,e)}var o=c(a);d&&(o=o.concat(d(a)));for(var s=u(n),v=u(a),y=0;y<o.length;++y){var b=o[y];if(!(r[b]||e&&e[b]||v&&v[b]||s&&s[b])){var m=f(a,b);try{l(n,b,m)}catch(t){}}}}return n}},"9R94":function(t,n,a){"use strict";var e=!0,i="Invariant failed";n.a=function(t,n){if(!t)throw e?new Error(i):new Error(i+": "+(n||""))}},JPst:function(t,n,a){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var a=function(t,n){var a=t[1]||"",e=t[3];if(!e)return a;if(n&&"function"==typeof btoa){var i=(o=e,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(u," */")),r=e.sources.map((function(t){return"/*# sourceURL=".concat(e.sourceRoot).concat(t," */")}));return[a].concat(r).concat([i]).join("\n")}var o,s,u;return[a].join("\n")}(n,t);return n[2]?"@media ".concat(n[2]," {").concat(a,"}"):a})).join("")},n.i=function(t,a){"string"==typeof t&&(t=[[null,t,""]]);for(var e=0;e<t.length;e++){var i=[].concat(t[e]);a&&(i[2]?i[2]="".concat(a," and ").concat(i[2]):i[2]=a),n.push(i)}},n}},LboF:function(t,n,a){"use strict";var e,i={},r=function(){return void 0===e&&(e=Boolean(window&&document&&document.all&&!window.atob)),e},o=function(){var t={};return function(n){if(void 0===t[n]){var a=document.querySelector(n);if(window.HTMLIFrameElement&&a instanceof window.HTMLIFrameElement)try{a=a.contentDocument.head}catch(t){a=null}t[n]=a}return t[n]}}();function s(t,n){for(var a=[],e={},i=0;i<t.length;i++){var r=t[i],o=n.base?r[0]+n.base:r[0],s={css:r[1],media:r[2],sourceMap:r[3]};e[o]?e[o].parts.push(s):a.push(e[o]={id:o,parts:[s]})}return a}function u(t,n){for(var a=0;a<t.length;a++){var e=t[a],r=i[e.id],o=0;if(r){for(r.refs++;o<r.parts.length;o++)r.parts[o](e.parts[o]);for(;o<e.parts.length;o++)r.parts.push(y(e.parts[o],n))}else{for(var s=[];o<e.parts.length;o++)s.push(y(e.parts[o],n));i[e.id]={id:e.id,refs:1,parts:s}}}}function l(t){var n=document.createElement("style");if(void 0===t.attributes.nonce){var e=a.nc;e&&(t.attributes.nonce=e)}if(Object.keys(t.attributes).forEach((function(a){n.setAttribute(a,t.attributes[a])})),"function"==typeof t.insert)t.insert(n);else{var i=o(t.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}return n}var c,d=(c=[],function(t,n){return c[t]=n,c.filter(Boolean).join("\n")});function f(t,n,a,e){var i=a?"":e.css;if(t.styleSheet)t.styleSheet.cssText=d(n,i);else{var r=document.createTextNode(i),o=t.childNodes;o[n]&&t.removeChild(o[n]),o.length?t.insertBefore(r,o[n]):t.appendChild(r)}}function p(t,n,a){var e=a.css,i=a.media,r=a.sourceMap;if(i&&t.setAttribute("media",i),r&&btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}var h=null,v=0;function y(t,n){var a,e,i;if(n.singleton){var r=v++;a=h||(h=l(n)),e=f.bind(null,a,r,!1),i=f.bind(null,a,r,!0)}else a=l(n),e=p.bind(null,a,n),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(a)};return e(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;e(t=n)}else i()}}t.exports=function(t,n){(n=n||{}).attributes="object"==typeof n.attributes?n.attributes:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=r());var a=s(t,n);return u(a,n),function(t){for(var e=[],r=0;r<a.length;r++){var o=a[r],l=i[o.id];l&&(l.refs--,e.push(l))}t&&u(s(t,n),n);for(var c=0;c<e.length;c++){var d=e[c];if(0===d.refs){for(var f=0;f<d.parts.length;f++)d.parts[f]();delete i[d.id]}}}}},LhCv:function(t,n,a){"use strict";var e=a("wx14");function i(t){return"/"===t.charAt(0)}function r(t,n){for(var a=n,e=a+1,i=t.length;e<i;a+=1,e+=1)t[a]=t[e];t.pop()}var o=function(t,n){void 0===n&&(n="");var a,e=t&&t.split("/")||[],o=n&&n.split("/")||[],s=t&&i(t),u=n&&i(n),l=s||u;if(t&&i(t)?o=e:e.length&&(o.pop(),o=o.concat(e)),!o.length)return"/";if(o.length){var c=o[o.length-1];a="."===c||".."===c||""===c}else a=!1;for(var d=0,f=o.length;f>=0;f--){var p=o[f];"."===p?r(o,f):".."===p?(r(o,f),d++):d&&(r(o,f),d--)}if(!l)for(;d--;d)o.unshift("..");!l||""===o[0]||o[0]&&i(o[0])||o.unshift("");var h=o.join("/");return a&&"/"!==h.substr(-1)&&(h+="/"),h};function s(t){return t.valueOf?t.valueOf():Object.prototype.valueOf.call(t)}var u=function t(n,a){if(n===a)return!0;if(null==n||null==a)return!1;if(Array.isArray(n))return Array.isArray(a)&&n.length===a.length&&n.every((function(n,e){return t(n,a[e])}));if("object"==typeof n||"object"==typeof a){var e=s(n),i=s(a);return e!==n||i!==a?t(e,i):Object.keys(Object.assign({},n,a)).every((function(e){return t(n[e],a[e])}))}return!1},l=a("9R94");function c(t){return"/"===t.charAt(0)?t:"/"+t}function d(t){return"/"===t.charAt(0)?t.substr(1):t}function f(t,n){return function(t,n){return 0===t.toLowerCase().indexOf(n.toLowerCase())&&-1!=="/?#".indexOf(t.charAt(n.length))}(t,n)?t.substr(n.length):t}function p(t){return"/"===t.charAt(t.length-1)?t.slice(0,-1):t}function h(t){var n=t.pathname,a=t.search,e=t.hash,i=n||"/";return a&&"?"!==a&&(i+="?"===a.charAt(0)?a:"?"+a),e&&"#"!==e&&(i+="#"===e.charAt(0)?e:"#"+e),i}function v(t,n,a,i){var r;"string"==typeof t?(r=function(t){var n=t||"/",a="",e="",i=n.indexOf("#");-1!==i&&(e=n.substr(i),n=n.substr(0,i));var r=n.indexOf("?");return-1!==r&&(a=n.substr(r),n=n.substr(0,r)),{pathname:n,search:"?"===a?"":a,hash:"#"===e?"":e}}(t)).state=n:(void 0===(r=Object(e.a)({},t)).pathname&&(r.pathname=""),r.search?"?"!==r.search.charAt(0)&&(r.search="?"+r.search):r.search="",r.hash?"#"!==r.hash.charAt(0)&&(r.hash="#"+r.hash):r.hash="",void 0!==n&&void 0===r.state&&(r.state=n));try{r.pathname=decodeURI(r.pathname)}catch(t){throw t instanceof URIError?new URIError('Pathname "'+r.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):t}return a&&(r.key=a),i?r.pathname?"/"!==r.pathname.charAt(0)&&(r.pathname=o(r.pathname,i.pathname)):r.pathname=i.pathname:r.pathname||(r.pathname="/"),r}function y(t,n){return t.pathname===n.pathname&&t.search===n.search&&t.hash===n.hash&&t.key===n.key&&u(t.state,n.state)}function b(){var t=null;var n=[];return{setPrompt:function(n){return t=n,function(){t===n&&(t=null)}},confirmTransitionTo:function(n,a,e,i){if(null!=t){var r="function"==typeof t?t(n,a):t;"string"==typeof r?"function"==typeof e?e(r,i):i(!0):i(!1!==r)}else i(!0)},appendListener:function(t){var a=!0;function e(){a&&t.apply(void 0,arguments)}return n.push(e),function(){a=!1,n=n.filter((function(t){return t!==e}))}},notifyListeners:function(){for(var t=arguments.length,a=new Array(t),e=0;e<t;e++)a[e]=arguments[e];n.forEach((function(t){return t.apply(void 0,a)}))}}}a.d(n,"a",(function(){return P})),a.d(n,"b",(function(){return C})),a.d(n,"d",(function(){return A})),a.d(n,"c",(function(){return v})),a.d(n,"f",(function(){return y})),a.d(n,"e",(function(){return h}));var m=!("undefined"==typeof window||!window.document||!window.document.createElement);function g(t,n){n(window.confirm(t))}var w="popstate",x="hashchange";function O(){try{return window.history.state||{}}catch(t){return{}}}function P(t){void 0===t&&(t={}),m||Object(l.a)(!1);var n,a=window.history,i=(-1===(n=window.navigator.userAgent).indexOf("Android 2.")&&-1===n.indexOf("Android 4.0")||-1===n.indexOf("Mobile Safari")||-1!==n.indexOf("Chrome")||-1!==n.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,r=!(-1===window.navigator.userAgent.indexOf("Trident")),o=t,s=o.forceRefresh,u=void 0!==s&&s,d=o.getUserConfirmation,y=void 0===d?g:d,P=o.keyLength,T=void 0===P?6:P,k=t.basename?p(c(t.basename)):"";function j(t){var n=t||{},a=n.key,e=n.state,i=window.location,r=i.pathname+i.search+i.hash;return k&&(r=f(r,k)),v(r,e,a)}function _(){return Math.random().toString(36).substr(2,T)}var E=b();function C(t){Object(e.a)(N,t),N.length=a.length,E.notifyListeners(N.location,N.action)}function L(t){(function(t){return void 0===t.state&&-1===navigator.userAgent.indexOf("CriOS")})(t)||z(j(t.state))}function A(){z(j(O()))}var S=!1;function z(t){if(S)S=!1,C();else{E.confirmTransitionTo(t,"POP",y,(function(n){n?C({action:"POP",location:t}):function(t){var n=N.location,a=I.indexOf(n.key);-1===a&&(a=0);var e=I.indexOf(t.key);-1===e&&(e=0);var i=a-e;i&&(S=!0,U(i))}(t)}))}}var R=j(O()),I=[R.key];function M(t){return k+h(t)}function U(t){a.go(t)}var q=0;function F(t){1===(q+=t)&&1===t?(window.addEventListener(w,L),r&&window.addEventListener(x,A)):0===q&&(window.removeEventListener(w,L),r&&window.removeEventListener(x,A))}var B=!1;var N={length:a.length,action:"POP",location:R,createHref:M,push:function(t,n){var e=v(t,n,_(),N.location);E.confirmTransitionTo(e,"PUSH",y,(function(t){if(t){var n=M(e),r=e.key,o=e.state;if(i)if(a.pushState({key:r,state:o},null,n),u)window.location.href=n;else{var s=I.indexOf(N.location.key),l=I.slice(0,s+1);l.push(e.key),I=l,C({action:"PUSH",location:e})}else window.location.href=n}}))},replace:function(t,n){var e=v(t,n,_(),N.location);E.confirmTransitionTo(e,"REPLACE",y,(function(t){if(t){var n=M(e),r=e.key,o=e.state;if(i)if(a.replaceState({key:r,state:o},null,n),u)window.location.replace(n);else{var s=I.indexOf(N.location.key);-1!==s&&(I[s]=e.key),C({action:"REPLACE",location:e})}else window.location.replace(n)}}))},go:U,goBack:function(){U(-1)},goForward:function(){U(1)},block:function(t){void 0===t&&(t=!1);var n=E.setPrompt(t);return B||(F(1),B=!0),function(){return B&&(B=!1,F(-1)),n()}},listen:function(t){var n=E.appendListener(t);return F(1),function(){F(-1),n()}}};return N}var T="hashchange",k={hashbang:{encodePath:function(t){return"!"===t.charAt(0)?t:"!/"+d(t)},decodePath:function(t){return"!"===t.charAt(0)?t.substr(1):t}},noslash:{encodePath:d,decodePath:c},slash:{encodePath:c,decodePath:c}};function j(t){var n=t.indexOf("#");return-1===n?t:t.slice(0,n)}function _(){var t=window.location.href,n=t.indexOf("#");return-1===n?"":t.substring(n+1)}function E(t){window.location.replace(j(window.location.href)+"#"+t)}function C(t){void 0===t&&(t={}),m||Object(l.a)(!1);var n=window.history,a=(window.navigator.userAgent.indexOf("Firefox"),t),i=a.getUserConfirmation,r=void 0===i?g:i,o=a.hashType,s=void 0===o?"slash":o,u=t.basename?p(c(t.basename)):"",d=k[s],y=d.encodePath,w=d.decodePath;function x(){var t=w(_());return u&&(t=f(t,u)),v(t)}var O=b();function P(t){Object(e.a)(B,t),B.length=n.length,O.notifyListeners(B.location,B.action)}var C=!1,L=null;function A(){var t,n,a=_(),e=y(a);if(a!==e)E(e);else{var i=x(),o=B.location;if(!C&&(n=i,(t=o).pathname===n.pathname&&t.search===n.search&&t.hash===n.hash))return;if(L===h(i))return;L=null,function(t){if(C)C=!1,P();else{O.confirmTransitionTo(t,"POP",r,(function(n){n?P({action:"POP",location:t}):function(t){var n=B.location,a=I.lastIndexOf(h(n));-1===a&&(a=0);var e=I.lastIndexOf(h(t));-1===e&&(e=0);var i=a-e;i&&(C=!0,M(i))}(t)}))}}(i)}}var S=_(),z=y(S);S!==z&&E(z);var R=x(),I=[h(R)];function M(t){n.go(t)}var U=0;function q(t){1===(U+=t)&&1===t?window.addEventListener(T,A):0===U&&window.removeEventListener(T,A)}var F=!1;var B={length:n.length,action:"POP",location:R,createHref:function(t){var n=document.querySelector("base"),a="";return n&&n.getAttribute("href")&&(a=j(window.location.href)),a+"#"+y(u+h(t))},push:function(t,n){var a=v(t,void 0,void 0,B.location);O.confirmTransitionTo(a,"PUSH",r,(function(t){if(t){var n=h(a),e=y(u+n);if(_()!==e){L=n,function(t){window.location.hash=t}(e);var i=I.lastIndexOf(h(B.location)),r=I.slice(0,i+1);r.push(n),I=r,P({action:"PUSH",location:a})}else P()}}))},replace:function(t,n){var a=v(t,void 0,void 0,B.location);O.confirmTransitionTo(a,"REPLACE",r,(function(t){if(t){var n=h(a),e=y(u+n);_()!==e&&(L=n,E(e));var i=I.indexOf(h(B.location));-1!==i&&(I[i]=n),P({action:"REPLACE",location:a})}}))},go:M,goBack:function(){M(-1)},goForward:function(){M(1)},block:function(t){void 0===t&&(t=!1);var n=O.setPrompt(t);return F||(q(1),F=!0),function(){return F&&(F=!1,q(-1)),n()}},listen:function(t){var n=O.appendListener(t);return q(1),function(){q(-1),n()}}};return B}function L(t,n,a){return Math.min(Math.max(t,n),a)}function A(t){void 0===t&&(t={});var n=t,a=n.getUserConfirmation,i=n.initialEntries,r=void 0===i?["/"]:i,o=n.initialIndex,s=void 0===o?0:o,u=n.keyLength,l=void 0===u?6:u,c=b();function d(t){Object(e.a)(w,t),w.length=w.entries.length,c.notifyListeners(w.location,w.action)}function f(){return Math.random().toString(36).substr(2,l)}var p=L(s,0,r.length-1),y=r.map((function(t){return v(t,void 0,"string"==typeof t?f():t.key||f())})),m=h;function g(t){var n=L(w.index+t,0,w.entries.length-1),e=w.entries[n];c.confirmTransitionTo(e,"POP",a,(function(t){t?d({action:"POP",location:e,index:n}):d()}))}var w={length:y.length,action:"POP",location:y[p],index:p,entries:y,createHref:m,push:function(t,n){var e=v(t,n,f(),w.location);c.confirmTransitionTo(e,"PUSH",a,(function(t){if(t){var n=w.index+1,a=w.entries.slice(0);a.length>n?a.splice(n,a.length-n,e):a.push(e),d({action:"PUSH",location:e,index:n,entries:a})}}))},replace:function(t,n){var e=v(t,n,f(),w.location);c.confirmTransitionTo(e,"REPLACE",a,(function(t){t&&(w.entries[w.index]=e,d({action:"REPLACE",location:e}))}))},go:g,goBack:function(){g(-1)},goForward:function(){g(1)},canGo:function(t){var n=w.index+t;return n>=0&&n<w.entries.length},block:function(t){return void 0===t&&(t=!1),c.setPrompt(t)},listen:function(t){return c.appendListener(t)}};return w}},MgzW:function(t,n,a){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var e=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var n={},a=0;a<10;a++)n["_"+String.fromCharCode(a)]=a;if("0123456789"!==Object.getOwnPropertyNames(n).map((function(t){return n[t]})).join(""))return!1;var e={};return"abcdefghijklmnopqrst".split("").forEach((function(t){e[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},e)).join("")}catch(t){return!1}}()?Object.assign:function(t,n){for(var a,s,u=o(t),l=1;l<arguments.length;l++){for(var c in a=Object(arguments[l]))i.call(a,c)&&(u[c]=a[c]);if(e){s=e(a);for(var d=0;d<s.length;d++)r.call(a,s[d])&&(u[s[d]]=a[s[d]])}}return u}},QCnb:function(t,n,a){"use strict";t.exports=a("+wdc")},VbXa:function(t,n){t.exports=function(t,n){t.prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n}},WbBG:function(t,n,a){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},dI71:function(t,n,a){"use strict";function e(t,n){t.prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n}a.d(n,"a",(function(){return e}))},fZtv:function(t,n,a){"use strict";(function(n){var a="__global_unique_id__";t.exports=function(){return n[a]=(n[a]||0)+1}}).call(this,a("yLpj"))},"q+eD":function(t,n,a){var e=a("JPst");(t.exports=e(!1)).push([t.i,'[data-sal]{transition-duration:.2s;transition-duration:var(--sal-duration,.2s);transition-delay:0s;transition-delay:var(--sal-delay,0s);transition-timing-function:ease;transition-timing-function:var(--sal-easing,ease)}[data-sal][data-sal-duration="200"]{transition-duration:.2s}[data-sal][data-sal-duration="250"]{transition-duration:.25s}[data-sal][data-sal-duration="300"]{transition-duration:.3s}[data-sal][data-sal-duration="350"]{transition-duration:.35s}[data-sal][data-sal-duration="400"]{transition-duration:.4s}[data-sal][data-sal-duration="450"]{transition-duration:.45s}[data-sal][data-sal-duration="500"]{transition-duration:.5s}[data-sal][data-sal-duration="550"]{transition-duration:.55s}[data-sal][data-sal-duration="600"]{transition-duration:.6s}[data-sal][data-sal-duration="650"]{transition-duration:.65s}[data-sal][data-sal-duration="700"]{transition-duration:.7s}[data-sal][data-sal-duration="750"]{transition-duration:.75s}[data-sal][data-sal-duration="800"]{transition-duration:.8s}[data-sal][data-sal-duration="850"]{transition-duration:.85s}[data-sal][data-sal-duration="900"]{transition-duration:.9s}[data-sal][data-sal-duration="950"]{transition-duration:.95s}[data-sal][data-sal-duration="1000"]{transition-duration:1s}[data-sal][data-sal-duration="1050"]{transition-duration:1.05s}[data-sal][data-sal-duration="1100"]{transition-duration:1.1s}[data-sal][data-sal-duration="1150"]{transition-duration:1.15s}[data-sal][data-sal-duration="1200"]{transition-duration:1.2s}[data-sal][data-sal-duration="1250"]{transition-duration:1.25s}[data-sal][data-sal-duration="1300"]{transition-duration:1.3s}[data-sal][data-sal-duration="1350"]{transition-duration:1.35s}[data-sal][data-sal-duration="1400"]{transition-duration:1.4s}[data-sal][data-sal-duration="1450"]{transition-duration:1.45s}[data-sal][data-sal-duration="1500"]{transition-duration:1.5s}[data-sal][data-sal-duration="1550"]{transition-duration:1.55s}[data-sal][data-sal-duration="1600"]{transition-duration:1.6s}[data-sal][data-sal-duration="1650"]{transition-duration:1.65s}[data-sal][data-sal-duration="1700"]{transition-duration:1.7s}[data-sal][data-sal-duration="1750"]{transition-duration:1.75s}[data-sal][data-sal-duration="1800"]{transition-duration:1.8s}[data-sal][data-sal-duration="1850"]{transition-duration:1.85s}[data-sal][data-sal-duration="1900"]{transition-duration:1.9s}[data-sal][data-sal-duration="1950"]{transition-duration:1.95s}[data-sal][data-sal-duration="2000"]{transition-duration:2s}[data-sal][data-sal-delay="50"]{transition-delay:.05s}[data-sal][data-sal-delay="100"]{transition-delay:.1s}[data-sal][data-sal-delay="150"]{transition-delay:.15s}[data-sal][data-sal-delay="200"]{transition-delay:.2s}[data-sal][data-sal-delay="250"]{transition-delay:.25s}[data-sal][data-sal-delay="300"]{transition-delay:.3s}[data-sal][data-sal-delay="350"]{transition-delay:.35s}[data-sal][data-sal-delay="400"]{transition-delay:.4s}[data-sal][data-sal-delay="450"]{transition-delay:.45s}[data-sal][data-sal-delay="500"]{transition-delay:.5s}[data-sal][data-sal-delay="550"]{transition-delay:.55s}[data-sal][data-sal-delay="600"]{transition-delay:.6s}[data-sal][data-sal-delay="650"]{transition-delay:.65s}[data-sal][data-sal-delay="700"]{transition-delay:.7s}[data-sal][data-sal-delay="750"]{transition-delay:.75s}[data-sal][data-sal-delay="800"]{transition-delay:.8s}[data-sal][data-sal-delay="850"]{transition-delay:.85s}[data-sal][data-sal-delay="900"]{transition-delay:.9s}[data-sal][data-sal-delay="950"]{transition-delay:.95s}[data-sal][data-sal-delay="1000"]{transition-delay:1s}[data-sal][data-sal-easing=linear]{transition-timing-function:linear}[data-sal][data-sal-easing=ease]{transition-timing-function:ease}[data-sal][data-sal-easing=ease-in]{transition-timing-function:ease-in}[data-sal][data-sal-easing=ease-out]{transition-timing-function:ease-out}[data-sal][data-sal-easing=ease-in-out]{transition-timing-function:ease-in-out}[data-sal][data-sal-easing=ease-in-cubic]{transition-timing-function:cubic-bezier(.55,.055,.675,.19)}[data-sal][data-sal-easing=ease-out-cubic]{transition-timing-function:cubic-bezier(.215,.61,.355,1)}[data-sal][data-sal-easing=ease-in-out-cubic]{transition-timing-function:cubic-bezier(.645,.045,.355,1)}[data-sal][data-sal-easing=ease-in-circ]{transition-timing-function:cubic-bezier(.6,.04,.98,.335)}[data-sal][data-sal-easing=ease-out-circ]{transition-timing-function:cubic-bezier(.075,.82,.165,1)}[data-sal][data-sal-easing=ease-in-out-circ]{transition-timing-function:cubic-bezier(.785,.135,.15,.86)}[data-sal][data-sal-easing=ease-in-expo]{transition-timing-function:cubic-bezier(.95,.05,.795,.035)}[data-sal][data-sal-easing=ease-out-expo]{transition-timing-function:cubic-bezier(.19,1,.22,1)}[data-sal][data-sal-easing=ease-in-out-expo]{transition-timing-function:cubic-bezier(1,0,0,1)}[data-sal][data-sal-easing=ease-in-quad]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-sal][data-sal-easing=ease-out-quad]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-sal][data-sal-easing=ease-in-out-quad]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-sal][data-sal-easing=ease-in-quart]{transition-timing-function:cubic-bezier(.895,.03,.685,.22)}[data-sal][data-sal-easing=ease-out-quart]{transition-timing-function:cubic-bezier(.165,.84,.44,1)}[data-sal][data-sal-easing=ease-in-out-quart]{transition-timing-function:cubic-bezier(.77,0,.175,1)}[data-sal][data-sal-easing=ease-in-quint]{transition-timing-function:cubic-bezier(.755,.05,.855,.06)}[data-sal][data-sal-easing=ease-out-quint]{transition-timing-function:cubic-bezier(.23,1,.32,1)}[data-sal][data-sal-easing=ease-in-out-quint]{transition-timing-function:cubic-bezier(.86,0,.07,1)}[data-sal][data-sal-easing=ease-in-sine]{transition-timing-function:cubic-bezier(.47,0,.745,.715)}[data-sal][data-sal-easing=ease-out-sine]{transition-timing-function:cubic-bezier(.39,.575,.565,1)}[data-sal][data-sal-easing=ease-in-out-sine]{transition-timing-function:cubic-bezier(.445,.05,.55,.95)}[data-sal][data-sal-easing=ease-in-back]{transition-timing-function:cubic-bezier(.6,-.28,.735,.045)}[data-sal][data-sal-easing=ease-out-back]{transition-timing-function:cubic-bezier(.175,.885,.32,1.275)}[data-sal][data-sal-easing=ease-in-out-back]{transition-timing-function:cubic-bezier(.68,-.55,.265,1.55)}[data-sal|=fade]{opacity:0;transition-property:opacity}[data-sal|=fade].sal-animate,body.sal-disabled [data-sal|=fade]{opacity:1}[data-sal|=slide]{opacity:0;transition-property:opacity,transform}[data-sal=slide-up]{transform:translateY(20%)}[data-sal=slide-down]{transform:translateY(-20%)}[data-sal=slide-left]{transform:translateX(20%)}[data-sal=slide-right]{transform:translateX(-20%)}[data-sal|=slide].sal-animate,body.sal-disabled [data-sal|=slide]{opacity:1;transform:none}[data-sal|=zoom]{opacity:0;transition-property:opacity,transform}[data-sal=zoom-in]{transform:scale(.5)}[data-sal=zoom-out]{transform:scale(1.1)}[data-sal|=zoom].sal-animate,body.sal-disabled [data-sal|=zoom]{opacity:1;transform:none}[data-sal|=flip]{-webkit-backface-visibility:hidden;backface-visibility:hidden;transition-property:transform}[data-sal=flip-left]{transform:perspective(2000px) rotateY(-91deg)}[data-sal=flip-right]{transform:perspective(2000px) rotateY(91deg)}[data-sal=flip-up]{transform:perspective(2000px) rotateX(-91deg)}[data-sal=flip-down]{transform:perspective(2000px) rotateX(91deg)}[data-sal|=flip].sal-animate,body.sal-disabled [data-sal|=flip]{transform:none}',""])},sTb7:function(t,n,a){var e=a("xxxk");"string"==typeof e&&(e=[[t.i,e,""]]);var i={insert:"head",singleton:!1},r=a("LboF")(e,i);e.locals&&(t.exports=e.locals),e.locals||t.hot.accept("xxxk",(function(){var n=a("xxxk");"string"==typeof n&&(n=[[t.i,n,""]]),r(n)})),t.hot.dispose((function(){r()}))},tEiQ:function(t,n,a){"use strict";var e=a("q1tI"),i=a.n(e),r=a("VbXa"),o=a.n(r),s=a("17x9"),u=a.n(s),l=a("fZtv"),c=a.n(l),d=1073741823;var f=i.a.createContext||function(t,n){var a,i,r="__create-react-context-"+c()()+"__",s=function(t){function a(){var n,a,e;return(n=t.apply(this,arguments)||this).emitter=(a=n.props.value,e=[],{on:function(t){e.push(t)},off:function(t){e=e.filter((function(n){return n!==t}))},get:function(){return a},set:function(t,n){a=t,e.forEach((function(t){return t(a,n)}))}}),n}o()(a,t);var e=a.prototype;return e.getChildContext=function(){var t;return(t={})[r]=this.emitter,t},e.componentWillReceiveProps=function(t){if(this.props.value!==t.value){var a,e=this.props.value,i=t.value;((r=e)===(o=i)?0!==r||1/r==1/o:r!=r&&o!=o)?a=0:(a="function"==typeof n?n(e,i):d,0!==(a|=0)&&this.emitter.set(t.value,a))}var r,o},e.render=function(){return this.props.children},a}(e.Component);s.childContextTypes=((a={})[r]=u.a.object.isRequired,a);var l=function(n){function a(){var t;return(t=n.apply(this,arguments)||this).state={value:t.getValue()},t.onUpdate=function(n,a){0!=((0|t.observedBits)&a)&&t.setState({value:t.getValue()})},t}o()(a,n);var e=a.prototype;return e.componentWillReceiveProps=function(t){var n=t.observedBits;this.observedBits=null==n?d:n},e.componentDidMount=function(){this.context[r]&&this.context[r].on(this.onUpdate);var t=this.props.observedBits;this.observedBits=null==t?d:t},e.componentWillUnmount=function(){this.context[r]&&this.context[r].off(this.onUpdate)},e.getValue=function(){return this.context[r]?this.context[r].get():t},e.render=function(){return(t=this.props.children,Array.isArray(t)?t[0]:t)(this.state.value);var t},a}(e.Component);return l.contextTypes=((i={})[r]=u.a.object,i),{Provider:s,Consumer:l}};n.a=f},tjUo:function(t,n,a){"use strict";a.r(n);var e=a("q1tI"),i=a.n(e),r=a("i8i4"),o=a.n(r),s=a("55Ip"),u=a("Ty5D");a("sTb7");function l(t){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,n){for(var a=0;a<n.length;a++){var e=n[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(t,e.key,e)}}function d(t,n){return!n||"object"!==l(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function f(t){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function p(t,n){return(p=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}var h=Object(e.lazy)((function(){return Promise.all([a.e(4),a.e(3)]).then(a.bind(null,"L6I0"))})),v=function(t){function n(){return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),d(this,f(n).apply(this,arguments))}var a,r,o;return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&p(t,n)}(n,t),a=n,(r=[{key:"render",value:function(){return i.a.createElement(e.Suspense,{fallback:"Loading..."},i.a.createElement(s.a,null,i.a.createElement(u.c,null,i.a.createElement(u.a,{exact:!0,path:"/",component:h}))))}}])&&c(a.prototype,r),o&&c(a,o),n}(e.Component);o.a.render(i.a.createElement(v,null),document.getElementById("root"))},wx14:function(t,n,a){"use strict";function e(){return(e=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(t[e]=a[e])}return t}).apply(this,arguments)}a.d(n,"a",(function(){return e}))},xxxk:function(t,n,a){var e=a("JPst"),i=a("q+eD");(n=t.exports=e(!1)).push([t.i,"@import url(https://fonts.googleapis.com/css?family=Rosarivo:400,400i&display=swap);"]),n.push([t.i,"@import url(https://fonts.googleapis.com/css?family=Roboto&display=swap);"]),n.i(i),n.push([t.i,"@import url(https://fonts.googleapis.com/css?family=Fredericka+the+Great&display=swap&subset=latin-ext);"]),n.push([t.i,"body,html{margin:0;padding:0;width:100%;height:100%;box-sizing:border-box}p{margin:0;padding:0}.bullet{height:10px;width:10px;background:#5918df;border-radius:50%;border:2px solid black;position:absolute;display:inline-block;top:13%;left:-4.4%}\n",""])},yLpj:function(t,n){var a;a=function(){return this}();try{a=a||new Function("return this")()}catch(t){"object"==typeof window&&(a=window)}t.exports=a},zLVn:function(t,n,a){"use strict";function e(t,n){if(null==t)return{};var a,e,i={},r=Object.keys(t);for(e=0;e<r.length;e++)a=r[e],n.indexOf(a)>=0||(i[a]=t[a]);return i}a.d(n,"a",(function(){return e}))}},[["tjUo",2,1]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvZXNtL3Jlc29sdmUtcGF0aG5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbHVlLWVxdWFsL2VzbS92YWx1ZS1lcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ndWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NhbC5qcy9kaXN0L3NhbC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Nhc3MvY29tbW9uLnNjc3M/ZmY4NiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2Fzcy9jb21tb24uc2NzcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIl0sIm5hbWVzIjpbImYiLCJnIiwiaCIsImsiLCJsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ3aW5kb3ciLCJNZXNzYWdlQ2hhbm5lbCIsInAiLCJxIiwidCIsImEiLCJ1bnN0YWJsZV9ub3ciLCJiIiwic2V0VGltZW91dCIsInUiLCJEYXRlIiwibm93IiwiY2xlYXJUaW1lb3V0IiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJ3IiwicGVyZm9ybWFuY2UiLCJ4IiwieSIsInoiLCJjb25zb2xlIiwiQSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZXJyb3IiLCJCIiwiQyIsIkQiLCJFIiwiRiIsIkciLCJNYXRoIiwiZmxvb3IiLCJIIiwiSSIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsIkoiLCJjIiwibGVuZ3RoIiwicHVzaCIsImQiLCJlIiwiSyIsIkwiLCJNIiwicG9wIiwibSIsIm4iLCJ2IiwiciIsInNvcnRJbmRleCIsImlkIiwiTiIsIk8iLCJQIiwiUSIsIlIiLCJTIiwiVCIsIlUiLCJWIiwiY2FsbGJhY2siLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsIlciLCJYIiwicHJpb3JpdHlMZXZlbCIsIlkiLCJaIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsImRlbGF5IiwidGltZW91dCIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwiYXBwbHkiLCJ0aGlzIiwiYXJndW1lbnRzIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsIm1vZHVsZSIsInNoaW0iLCJwcm9wcyIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZXJyIiwiRXJyb3IiLCJuYW1lIiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiYm9vbCIsImZ1bmMiLCJudW1iZXIiLCJvYmplY3QiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudCIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm5vZGUiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJ0eXBlIiwiS05PV05fU1RBVElDUyIsInByb3RvdHlwZSIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJrZXlzIiwiY29uY2F0IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJpIiwia2V5IiwiZGVzY3JpcHRvciIsImlzUHJvZHVjdGlvbiIsInByZWZpeCIsImNvbmRpdGlvbiIsIm1lc3NhZ2UiLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJqb2luIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJsaXN0VG9TdHlsZXMiLCJvcHRpb25zIiwic3R5bGVzIiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJjc3MiLCJtZWRpYSIsInBhcnRzIiwiYWRkU3R5bGVzVG9Eb20iLCJkb21TdHlsZSIsImoiLCJyZWZzIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwib2JqIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwiYmluZCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwiX2kiLCJfZG9tU3R5bGUiLCJpc0Fic29sdXRlIiwicGF0aG5hbWUiLCJjaGFyQXQiLCJzcGxpY2VPbmUiLCJ0byIsImZyb20iLCJ1bmRlZmluZWQiLCJoYXNUcmFpbGluZ1NsYXNoIiwidG9QYXJ0cyIsInNwbGl0IiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJsYXN0IiwidXAiLCJ1bnNoaWZ0IiwicmVzdWx0Iiwic3Vic3RyIiwidmFsdWVPZiIsImNhbGwiLCJ2YWx1ZUVxdWFsIiwiQXJyYXkiLCJpc0FycmF5IiwiZXZlcnkiLCJhVmFsdWUiLCJiVmFsdWUiLCJhc3NpZ24iLCJhZGRMZWFkaW5nU2xhc2giLCJwYXRoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdHJpcEJhc2VuYW1lIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJzbGljZSIsImNyZWF0ZVBhdGgiLCJzZWFyY2giLCJoYXNoIiwiY3JlYXRlTG9jYXRpb24iLCJzdGF0ZSIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwiZGVjb2RlVVJJIiwiVVJJRXJyb3IiLCJsb2NhdGlvbnNBcmVFcXVhbCIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0IiwibGlzdGVuZXJzIiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJhY3Rpb24iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJmbiIsImlzQWN0aXZlIiwibGlzdGVuZXIiLCJub3RpZnlMaXN0ZW5lcnMiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJjYW5Vc2VET00iLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwiUG9wU3RhdGVFdmVudCIsIkhhc2hDaGFuZ2VFdmVudCIsImdldEhpc3RvcnlTdGF0ZSIsImhpc3RvcnkiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsInVhIiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl9yZWYiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwicmFuZG9tIiwidHJhbnNpdGlvbk1hbmFnZXIiLCJzZXRTdGF0ZSIsIm5leHRTdGF0ZSIsImhhbmRsZVBvcFN0YXRlIiwiZXZlbnQiLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsIm9rIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxLZXlzIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJnbyIsInJldmVydFBvcCIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzQmxvY2tlZCIsImhyZWYiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2UiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIkhhc2hDaGFuZ2VFdmVudCQxIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwic3RyaXBIYXNoIiwidXJsIiwiZ2V0SGFzaFBhdGgiLCJzdWJzdHJpbmciLCJyZXBsYWNlSGFzaFBhdGgiLCJjcmVhdGVIYXNoSGlzdG9yeSIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImJhc2VUYWciLCJnZXRBdHRyaWJ1dGUiLCJwdXNoSGFzaFBhdGgiLCJuZXh0UGF0aHMiLCJjbGFtcCIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwibWluIiwibWF4IiwiY3JlYXRlTWVtb3J5SGlzdG9yeSIsIl9wcm9wcyRpbml0aWFsRW50cmllcyIsImluaXRpYWxFbnRyaWVzIiwiX3Byb3BzJGluaXRpYWxJbmRleCIsImluaXRpYWxJbmRleCIsImVudHJpZXMiLCJlbnRyeSIsIm5leHRJbmRleCIsIm5leHRFbnRyaWVzIiwic3BsaWNlIiwiY2FuR28iLCJoYXNPd25Qcm9wZXJ0eSIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwidmFsIiwiVHlwZUVycm9yIiwidGVzdDEiLCJTdHJpbmciLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9scyIsInMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsIl9fcHJvdG9fXyIsIl9pbmhlcml0c0xvb3NlIiwiZ2xvYmFsIiwiX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIiwibG9jYWxzIiwiaG90IiwiYWNjZXB0IiwibmV3Q29udGVudCIsImRpc3Bvc2UiLCJNQVhfU0lHTkVEXzMxX0JJVF9JTlQiLCJjcmVhdGVDb250ZXh0IiwiZGVmYXVsdFZhbHVlIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsIlByb3ZpZGVyIiwiX0NvbXBvbmVudCIsIl90aGlzIiwiaGFuZGxlcnMiLCJlbWl0dGVyIiwib24iLCJoYW5kbGVyIiwib2ZmIiwiZ2V0Iiwic2V0IiwibmV3VmFsdWUiLCJjaGFuZ2VkQml0cyIsIl9wcm90byIsImdldENoaWxkQ29udGV4dCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJvbGRWYWx1ZSIsImNoaWxkcmVuIiwiQ29uc3VtZXIiLCJfQ29tcG9uZW50MiIsIl90aGlzMiIsImdldFZhbHVlIiwib25VcGRhdGUiLCJvYnNlcnZlZEJpdHMiLCJfcHJvdG8yIiwiY29tcG9uZW50RGlkTW91bnQiLCJjb250ZXh0IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJIb21lIiwibGF6eSIsIkFwcCIsImZhbGxiYWNrIiwiQ29tcG9uZW50IiwiUmVhY3RET00iLCJnZXRFbGVtZW50QnlJZCIsIl9leHRlbmRzIiwiX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIiwiRnVuY3Rpb24iLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7R0FTb0UsSUFBSUEsRUFBRUMsRUFBRUMsRUFBRUMsRUFBRUMsRUFDaEYsR0FEYUMsT0FBT0MsZUFBZUMsRUFBUSxhQUFhLENBQUNDLE9BQU0sSUFDNUQsb0JBQXFCQyxRQUFRLG1CQUFvQkMsZUFBZSxDQUFDLElBQUlDLEVBQUUsS0FBS0MsRUFBRSxLQUFLQyxFQUFFLFdBQVcsR0FBRyxPQUFPRixFQUFFLElBQUksSUFBSUcsRUFBRVAsRUFBUVEsZUFBZUos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RUFBTzBFLEVBQUksOEVBQ3pCN0ssRUFBUTZLLEVBQUVrVixHQUNWL2YsRUFBUTJDLEtBQUssQ0FBQ3dELEVBQU8wRSxFQUFJLDZHQUV6QjdLLEVBQVEyQyxLQUFLLENBQUN3RCxFQUFPMEUsRUFBSSx5UEFBMFAsTSxtQkNUblIsSUFBSW5MLEVBR0pBLEVBQUksV0FDSCxPQUFPNEYsS0FESixHQUlKLElBRUM1RixFQUFJQSxHQUFLLElBQUlzZ0IsU0FBUyxjQUFiLEdBQ1IsTUFBT25kLEdBRWMsaUJBQVgzQyxTQUFxQlIsRUFBSVEsUUFPckNpRyxFQUFPbkcsUUFBVU4sRyxrQ0NuQkYsU0FBU3VnQixFQUE4QjNULEVBQVE0VCxHQUM1RCxHQUFjLE1BQVY1VCxFQUFnQixNQUFPLEdBQzNCLElBRUl4QixFQUFLRCxFQUZMdUMsRUFBUyxHQUNUK1MsRUFBYXJnQixPQUFPMkssS0FBSzZCLEdBRzdCLElBQUt6QixFQUFJLEVBQUdBLEVBQUlzVixFQUFXemQsT0FBUW1JLElBQ2pDQyxFQUFNcVYsRUFBV3RWLEdBQ2JxVixFQUFTbk4sUUFBUWpJLElBQVEsSUFDN0JzQyxFQUFPdEMsR0FBT3dCLEVBQU94QixJQUd2QixPQUFPc0MsRUFaVCxvQyIsImZpbGUiOiJhcHAuYzZhN2ZiMzNlY2JmYjFlMWIzNWYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTguMFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBmLGcsaCxrLGw7XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgcD1udWxsLHE9bnVsbCx0PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXApdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7cCghMCxhKTtwPW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh0LDApLGI7fX0sdT1EYXRlLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCktdX07Zj1mdW5jdGlvbihhKXtudWxsIT09cD9zZXRUaW1lb3V0KGYsMCxhKToocD1hLHNldFRpbWVvdXQodCwwKSl9O2c9ZnVuY3Rpb24oYSxiKXtxPXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChxKX07az1mdW5jdGlvbigpe3JldHVybiExfTtsPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHc9d2luZG93LnBlcmZvcm1hbmNlLHg9d2luZG93LkRhdGUsXG55PXdpbmRvdy5zZXRUaW1lb3V0LHo9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciBBPXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpfWlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiB3JiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5ub3cpZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gdy5ub3coKX07ZWxzZXt2YXIgQj14Lm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCktQn19dmFyIEM9ITEsRD1udWxsLEU9LTEsRj01LEc9MDtrPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PUd9O2w9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWVyYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCB1bnN1cHBvcnRlZFwiKTpGPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgSD1uZXcgTWVzc2FnZUNoYW5uZWwsST1ILnBvcnQyO0gucG9ydDEub25tZXNzYWdlPVxuZnVuY3Rpb24oKXtpZihudWxsIT09RCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtHPWErRjt0cnl7RCghMCxhKT9JLnBvc3RNZXNzYWdlKG51bGwpOihDPSExLEQ9bnVsbCl9Y2F0Y2goYil7dGhyb3cgSS5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBDPSExfTtmPWZ1bmN0aW9uKGEpe0Q9YTtDfHwoQz0hMCxJLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0U9eShmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eihFKTtFPS0xfX1mdW5jdGlvbiBKKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1NYXRoLmZsb29yKChjLTEpLzIpLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEsoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEwoYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIE0oYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SyhuLGMpKXZvaWQgMCE9PXImJjA+SyhyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SyhyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTj1bXSxPPVtdLFA9MSxRPW51bGwsUj0zLFM9ITEsVD0hMSxVPSExO1xuZnVuY3Rpb24gVihhKXtmb3IodmFyIGI9TChPKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKU0oTyk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlNKE8pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSihOLGIpO2Vsc2UgYnJlYWs7Yj1MKE8pfX1mdW5jdGlvbiBXKGEpe1U9ITE7VihhKTtpZighVClpZihudWxsIT09TChOKSlUPSEwLGYoWCk7ZWxzZXt2YXIgYj1MKE8pO251bGwhPT1iJiZnKFcsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gWChhLGIpe1Q9ITE7VSYmKFU9ITEsaCgpKTtTPSEwO3ZhciBjPVI7dHJ5e1YoYik7Zm9yKFE9TChOKTtudWxsIT09USYmKCEoUS5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWsoKSk7KXt2YXIgZD1RLmNhbGxiYWNrO2lmKG51bGwhPT1kKXtRLmNhbGxiYWNrPW51bGw7Uj1RLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChRLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/US5jYWxsYmFjaz1lOlE9PT1MKE4pJiZNKE4pO1YoYil9ZWxzZSBNKE4pO1E9TChOKX1pZihudWxsIT09USl2YXIgbT0hMDtlbHNle3ZhciBuPUwoTyk7bnVsbCE9PW4mJmcoVyxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7UT1udWxsLFI9YyxTPSExfX1cbmZ1bmN0aW9uIFkoYSl7c3dpdGNoKGEpe2Nhc2UgMTpyZXR1cm4tMTtjYXNlIDI6cmV0dXJuIDI1MDtjYXNlIDU6cmV0dXJuIDEwNzM3NDE4MjM7Y2FzZSA0OnJldHVybiAxRTQ7ZGVmYXVsdDpyZXR1cm4gNUUzfX12YXIgWj1sO2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UjtSPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtSPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUil7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9Un12YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1I9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3ZhciBlPWMuZGVsYXk7ZT1cIm51bWJlclwiPT09dHlwZW9mIGUmJjA8ZT9kK2U6ZDtjPVwibnVtYmVyXCI9PT10eXBlb2YgYy50aW1lb3V0P2MudGltZW91dDpZKGEpfWVsc2UgYz1ZKGEpLGU9ZDtjPWUrYzthPXtpZDpQKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmUsZXhwaXJhdGlvblRpbWU6Yyxzb3J0SW5kZXg6LTF9O2U+ZD8oYS5zb3J0SW5kZXg9ZSxKKE8sYSksbnVsbD09PUwoTikmJmE9PT1MKE8pJiYoVT9oKCk6VT0hMCxnKFcsZS1kKSkpOihhLnNvcnRJbmRleD1jLEooTixhKSxUfHxTfHwoVD0hMCxmKFgpKSk7cmV0dXJuIGF9O2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtcbmV4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVI7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1I9Y319fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFJ9O2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1YoYSk7dmFyIGI9TChOKTtyZXR1cm4gYiE9PVEmJm51bGwhPT1RJiZudWxsIT09YiYmbnVsbCE9PWIuY2FsbGJhY2smJmIuc3RhcnRUaW1lPD1hJiZiLmV4cGlyYXRpb25UaW1lPFEuZXhwaXJhdGlvblRpbWV8fGsoKX07ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9WjtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7VHx8U3x8KFQ9ITAsZihYKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBMKE4pfTtleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfVxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmIChjb25kaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgaW52YXJpYW50O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tpXSk7XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCkuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucykge1xuICB2YXIgc3R5bGVzID0gW107XG4gIHZhciBuZXdTdHlsZXMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNzcyA9IGl0ZW1bMV07XG4gICAgdmFyIG1lZGlhID0gaXRlbVsyXTtcbiAgICB2YXIgc291cmNlTWFwID0gaXRlbVszXTtcbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGNzczogY3NzLFxuICAgICAgbWVkaWE6IG1lZGlhLFxuICAgICAgc291cmNlTWFwOiBzb3VyY2VNYXBcbiAgICB9O1xuXG4gICAgaWYgKCFuZXdTdHlsZXNbaWRdKSB7XG4gICAgICBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIHBhcnRzOiBbcGFydF1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV07XG4gICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG4gICAgdmFyIGogPSAwO1xuXG4gICAgaWYgKGRvbVN0eWxlKSB7XG4gICAgICBkb21TdHlsZS5yZWZzKys7XG5cbiAgICAgIGZvciAoOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnRzID0gW107XG5cbiAgICAgIGZvciAoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7XG4gICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICByZWZzOiAxLFxuICAgICAgICBwYXJ0czogcGFydHNcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgb3B0aW9ucy5hdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMob3B0aW9ucy5hdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBvcHRpb25zLmF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5hdHRyaWJ1dGVzID0gdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcyA9PT0gJ29iamVjdCcgPyBvcHRpb25zLmF0dHJpYnV0ZXMgOiB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICB2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuICBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICB2YXIgbWF5UmVtb3ZlID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV07XG4gICAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuICAgICAgaWYgKGRvbVN0eWxlKSB7XG4gICAgICAgIGRvbVN0eWxlLnJlZnMtLTtcbiAgICAgICAgbWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdMaXN0KSB7XG4gICAgICB2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgICAgYWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbWF5UmVtb3ZlLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9kb21TdHlsZSA9IG1heVJlbW92ZVtfaV07XG5cbiAgICAgIGlmIChfZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IF9kb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIF9kb21TdHlsZS5wYXJ0c1tqXSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIHN0eWxlc0luRG9tW19kb21TdHlsZS5pZF07XG4gICAgICB9XG4gICAgfVxuICB9O1xufTsiLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLCBmcm9tKSB7XG4gIGlmIChmcm9tID09PSB1bmRlZmluZWQpIGZyb20gPSAnJztcblxuICB2YXIgdG9QYXJ0cyA9ICh0byAmJiB0by5zcGxpdCgnLycpKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IChmcm9tICYmIGZyb20uc3BsaXQoJy8nKSkgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcblxuICBpZiAoXG4gICAgbXVzdEVuZEFicyAmJlxuICAgIGZyb21QYXJ0c1swXSAhPT0gJycgJiZcbiAgICAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKVxuICApXG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuIiwiZnVuY3Rpb24gdmFsdWVPZihvYmopIHtcbiAgcmV0dXJuIG9iai52YWx1ZU9mID8gb2JqLnZhbHVlT2YoKSA6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKG9iaik7XG59XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICAvLyBUZXN0IGZvciBzdHJpY3QgZXF1YWxpdHkgZmlyc3QuXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBPdGhlcndpc2UsIGlmIGVpdGhlciBvZiB0aGVtID09IG51bGwgdGhleSBhcmUgbm90IGVxdWFsLlxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIEFycmF5LmlzQXJyYXkoYikgJiZcbiAgICAgIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJlxuICAgICAgYS5ldmVyeShmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSB2YWx1ZU9mKGEpO1xuICAgIHZhciBiVmFsdWUgPSB2YWx1ZU9mKGIpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBhLCBiKSkuZXZlcnkoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0c0xvb3NlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsIi8vIEBmbG93XG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ2xvYmFsW2tleV0gPSAoZ2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufTtcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiW2RhdGEtc2FsXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi4yczt0cmFuc2l0aW9uLWR1cmF0aW9uOnZhcigtLXNhbC1kdXJhdGlvbiwuMnMpO3RyYW5zaXRpb24tZGVsYXk6MHM7dHJhbnNpdGlvbi1kZWxheTp2YXIoLS1zYWwtZGVsYXksMHMpO3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2U7dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246dmFyKC0tc2FsLWVhc2luZyxlYXNlKX1bZGF0YS1zYWxdW2RhdGEtc2FsLWR1cmF0aW9uPVxcXCIyMDBcXFwiXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi4yc31bZGF0YS1zYWxdW2RhdGEtc2FsLWR1cmF0aW9uPVxcXCIyNTBcXFwiXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi4yNXN9W2RhdGEtc2FsXVtkYXRhLXNhbC1kdXJhdGlvbj1cXFwiMzAwXFxcIl17dHJhbnNpdGlvbi1kdXJhdGlvbjouM3N9W2RhdGEtc2FsXVtkYXRhLXNhbC1kdXJhdGlvbj1cXFwiMzUwXFxcIl17dHJhbnNpdGlvbi1kdXJhdGlvbjouMzVzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZHVyYXRpb249XFxcIjQwMFxcXCJde3RyYW5zaXRpb24tZHVyYXRpb246LjRzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZHVyYXRpb249XFxcIjQ1MFxcXCJde3RyYW5zaXRpb24tZHVyYXRpb246LjQ1c31bZGF0YS1zYWxdW2RhdGEtc2FsLWR1cmF0aW9uPVxcXCI1MDBcXFwiXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi41c31bZGF0YS1zYWxdW2RhdGEtc2FsLWR1cmF0aW9uPVxcXCI1NTBcXFwiXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi41NXN9W2RhdGEtc2FsXVtkYXRhLXNhbC1kdXJhdGlvbj1cXFwiNjAwXFxcIl17dHJhbnNpdGlvbi1kdXJhdGlvbjouNnN9W2RhdGEtc2FsXVtkYXRhLXNhbC1kdXJhdGlvbj1cXFwiNjUwXFxcIl17dHJhbnNpdGlvbi1kdXJhdGlvbjouNjVzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZHVyYXRpb249XFxcIjcwMFxcXCJde3RyYW5zaXRpb24tZHVyYXRpb246LjdzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZHVyYXRpb249XFxcIjc1MFxcXCJde3RyYW5zaXRpb24tZHVyYXRpb246Ljc1c31bZGF0YS1zYWxdW2RhdGEtc2FsLWR1cmF0aW9uPVxcXCI4MDBcXFwiXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi44c31bZGF0YS1zYWxdW2RhdGEtc2FsLWR1cmF0aW9uPVxcXCI4NTBcXFwiXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi44NXN9W2RhdGEtc2FsXVtkYXRhLXNhbC1kdXJhdGlvbj1cXFwiOTAwXFxcIl17dHJhbnNpdGlvbi1kdXJhdGlvbjouOXN9W2RhdGEtc2FsXVtkYXRhLXNhbC1kdXJhdGlvbj1cXFwiOTUwXFxcIl17dHJhbnNpdGlvbi1kdXJhdGlvbjouOTVzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZHVyYXRpb249XFxcIjEwMDBcXFwiXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjFzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZHVyYXRpb249XFxcIjEwNTBcXFwiXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuMDVzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZHVyYXRpb249XFxcIjExMDBcXFwiXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuMXN9W2RhdGEtc2FsXVtkYXRhLXNhbC1kdXJhdGlvbj1cXFwiMTE1MFxcXCJde3RyYW5zaXRpb24tZHVyYXRpb246MS4xNXN9W2RhdGEtc2FsXVtkYXRhLXNhbC1kdXJhdGlvbj1cXFwiMTIwMFxcXCJde3RyYW5zaXRpb24tZHVyYXRpb246MS4yc31bZGF0YS1zYWxdW2RhdGEtc2FsLWR1cmF0aW9uPVxcXCIxMjUwXFxcIl17dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjI1c31bZGF0YS1zYWxdW2RhdGEtc2FsLWR1cmF0aW9uPVxcXCIxMzAwXFxcIl17dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjNzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZHVyYXRpb249XFxcIjEzNTBcXFwiXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuMzVzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZHVyYXRpb249XFxcIjE0MDBcXFwiXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuNHN9W2RhdGEtc2FsXVtkYXRhLXNhbC1kdXJhdGlvbj1cXFwiMTQ1MFxcXCJde3RyYW5zaXRpb24tZHVyYXRpb246MS40NXN9W2RhdGEtc2FsXVtkYXRhLXNhbC1kdXJhdGlvbj1cXFwiMTUwMFxcXCJde3RyYW5zaXRpb24tZHVyYXRpb246MS41c31bZGF0YS1zYWxdW2RhdGEtc2FsLWR1cmF0aW9uPVxcXCIxNTUwXFxcIl17dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjU1c31bZGF0YS1zYWxdW2RhdGEtc2FsLWR1cmF0aW9uPVxcXCIxNjAwXFxcIl17dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjZzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZHVyYXRpb249XFxcIjE2NTBcXFwiXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuNjVzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZHVyYXRpb249XFxcIjE3MDBcXFwiXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuN3N9W2RhdGEtc2FsXVtkYXRhLXNhbC1kdXJhdGlvbj1cXFwiMTc1MFxcXCJde3RyYW5zaXRpb24tZHVyYXRpb246MS43NXN9W2RhdGEtc2FsXVtkYXRhLXNhbC1kdXJhdGlvbj1cXFwiMTgwMFxcXCJde3RyYW5zaXRpb24tZHVyYXRpb246MS44c31bZGF0YS1zYWxdW2RhdGEtc2FsLWR1cmF0aW9uPVxcXCIxODUwXFxcIl17dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjg1c31bZGF0YS1zYWxdW2RhdGEtc2FsLWR1cmF0aW9uPVxcXCIxOTAwXFxcIl17dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjlzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZHVyYXRpb249XFxcIjE5NTBcXFwiXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuOTVzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZHVyYXRpb249XFxcIjIwMDBcXFwiXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjJzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZGVsYXk9XFxcIjUwXFxcIl17dHJhbnNpdGlvbi1kZWxheTouMDVzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZGVsYXk9XFxcIjEwMFxcXCJde3RyYW5zaXRpb24tZGVsYXk6LjFzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZGVsYXk9XFxcIjE1MFxcXCJde3RyYW5zaXRpb24tZGVsYXk6LjE1c31bZGF0YS1zYWxdW2RhdGEtc2FsLWRlbGF5PVxcXCIyMDBcXFwiXXt0cmFuc2l0aW9uLWRlbGF5Oi4yc31bZGF0YS1zYWxdW2RhdGEtc2FsLWRlbGF5PVxcXCIyNTBcXFwiXXt0cmFuc2l0aW9uLWRlbGF5Oi4yNXN9W2RhdGEtc2FsXVtkYXRhLXNhbC1kZWxheT1cXFwiMzAwXFxcIl17dHJhbnNpdGlvbi1kZWxheTouM3N9W2RhdGEtc2FsXVtkYXRhLXNhbC1kZWxheT1cXFwiMzUwXFxcIl17dHJhbnNpdGlvbi1kZWxheTouMzVzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZGVsYXk9XFxcIjQwMFxcXCJde3RyYW5zaXRpb24tZGVsYXk6LjRzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZGVsYXk9XFxcIjQ1MFxcXCJde3RyYW5zaXRpb24tZGVsYXk6LjQ1c31bZGF0YS1zYWxdW2RhdGEtc2FsLWRlbGF5PVxcXCI1MDBcXFwiXXt0cmFuc2l0aW9uLWRlbGF5Oi41c31bZGF0YS1zYWxdW2RhdGEtc2FsLWRlbGF5PVxcXCI1NTBcXFwiXXt0cmFuc2l0aW9uLWRlbGF5Oi41NXN9W2RhdGEtc2FsXVtkYXRhLXNhbC1kZWxheT1cXFwiNjAwXFxcIl17dHJhbnNpdGlvbi1kZWxheTouNnN9W2RhdGEtc2FsXVtkYXRhLXNhbC1kZWxheT1cXFwiNjUwXFxcIl17dHJhbnNpdGlvbi1kZWxheTouNjVzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZGVsYXk9XFxcIjcwMFxcXCJde3RyYW5zaXRpb24tZGVsYXk6LjdzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZGVsYXk9XFxcIjc1MFxcXCJde3RyYW5zaXRpb24tZGVsYXk6Ljc1c31bZGF0YS1zYWxdW2RhdGEtc2FsLWRlbGF5PVxcXCI4MDBcXFwiXXt0cmFuc2l0aW9uLWRlbGF5Oi44c31bZGF0YS1zYWxdW2RhdGEtc2FsLWRlbGF5PVxcXCI4NTBcXFwiXXt0cmFuc2l0aW9uLWRlbGF5Oi44NXN9W2RhdGEtc2FsXVtkYXRhLXNhbC1kZWxheT1cXFwiOTAwXFxcIl17dHJhbnNpdGlvbi1kZWxheTouOXN9W2RhdGEtc2FsXVtkYXRhLXNhbC1kZWxheT1cXFwiOTUwXFxcIl17dHJhbnNpdGlvbi1kZWxheTouOTVzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZGVsYXk9XFxcIjEwMDBcXFwiXXt0cmFuc2l0aW9uLWRlbGF5OjFzfVtkYXRhLXNhbF1bZGF0YS1zYWwtZWFzaW5nPWxpbmVhcl17dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyfVtkYXRhLXNhbF1bZGF0YS1zYWwtZWFzaW5nPWVhc2Vde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2V9W2RhdGEtc2FsXVtkYXRhLXNhbC1lYXNpbmc9ZWFzZS1pbl17dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbn1bZGF0YS1zYWxdW2RhdGEtc2FsLWVhc2luZz1lYXNlLW91dF17dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9W2RhdGEtc2FsXVtkYXRhLXNhbC1lYXNpbmc9ZWFzZS1pbi1vdXRde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0fVtkYXRhLXNhbF1bZGF0YS1zYWwtZWFzaW5nPWVhc2UtaW4tY3ViaWNde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNTUsLjA1NSwuNjc1LC4xOSl9W2RhdGEtc2FsXVtkYXRhLXNhbC1lYXNpbmc9ZWFzZS1vdXQtY3ViaWNde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpfVtkYXRhLXNhbF1bZGF0YS1zYWwtZWFzaW5nPWVhc2UtaW4tb3V0LWN1YmljXXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjY0NSwuMDQ1LC4zNTUsMSl9W2RhdGEtc2FsXVtkYXRhLXNhbC1lYXNpbmc9ZWFzZS1pbi1jaXJjXXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjYsLjA0LC45OCwuMzM1KX1bZGF0YS1zYWxdW2RhdGEtc2FsLWVhc2luZz1lYXNlLW91dC1jaXJjXXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjA3NSwuODIsLjE2NSwxKX1bZGF0YS1zYWxdW2RhdGEtc2FsLWVhc2luZz1lYXNlLWluLW91dC1jaXJjXXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjc4NSwuMTM1LC4xNSwuODYpfVtkYXRhLXNhbF1bZGF0YS1zYWwtZWFzaW5nPWVhc2UtaW4tZXhwb117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC45NSwuMDUsLjc5NSwuMDM1KX1bZGF0YS1zYWxdW2RhdGEtc2FsLWVhc2luZz1lYXNlLW91dC1leHBvXXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjE5LDEsLjIyLDEpfVtkYXRhLXNhbF1bZGF0YS1zYWwtZWFzaW5nPWVhc2UtaW4tb3V0LWV4cG9de3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllcigxLDAsMCwxKX1bZGF0YS1zYWxdW2RhdGEtc2FsLWVhc2luZz1lYXNlLWluLXF1YWRde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNTUsLjA4NSwuNjgsLjUzKX1bZGF0YS1zYWxdW2RhdGEtc2FsLWVhc2luZz1lYXNlLW91dC1xdWFkXXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjI1LC40NiwuNDUsLjk0KX1bZGF0YS1zYWxdW2RhdGEtc2FsLWVhc2luZz1lYXNlLWluLW91dC1xdWFkXXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjQ1NSwuMDMsLjUxNSwuOTU1KX1bZGF0YS1zYWxdW2RhdGEtc2FsLWVhc2luZz1lYXNlLWluLXF1YXJ0XXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjg5NSwuMDMsLjY4NSwuMjIpfVtkYXRhLXNhbF1bZGF0YS1zYWwtZWFzaW5nPWVhc2Utb3V0LXF1YXJ0XXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjE2NSwuODQsLjQ0LDEpfVtkYXRhLXNhbF1bZGF0YS1zYWwtZWFzaW5nPWVhc2UtaW4tb3V0LXF1YXJ0XXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjc3LDAsLjE3NSwxKX1bZGF0YS1zYWxdW2RhdGEtc2FsLWVhc2luZz1lYXNlLWluLXF1aW50XXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjc1NSwuMDUsLjg1NSwuMDYpfVtkYXRhLXNhbF1bZGF0YS1zYWwtZWFzaW5nPWVhc2Utb3V0LXF1aW50XXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIzLDEsLjMyLDEpfVtkYXRhLXNhbF1bZGF0YS1zYWwtZWFzaW5nPWVhc2UtaW4tb3V0LXF1aW50XXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjg2LDAsLjA3LDEpfVtkYXRhLXNhbF1bZGF0YS1zYWwtZWFzaW5nPWVhc2UtaW4tc2luZV17dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC40NywwLC43NDUsLjcxNSl9W2RhdGEtc2FsXVtkYXRhLXNhbC1lYXNpbmc9ZWFzZS1vdXQtc2luZV17dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4zOSwuNTc1LC41NjUsMSl9W2RhdGEtc2FsXVtkYXRhLXNhbC1lYXNpbmc9ZWFzZS1pbi1vdXQtc2luZV17dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC40NDUsLjA1LC41NSwuOTUpfVtkYXRhLXNhbF1bZGF0YS1zYWwtZWFzaW5nPWVhc2UtaW4tYmFja117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC42LC0uMjgsLjczNSwuMDQ1KX1bZGF0YS1zYWxdW2RhdGEtc2FsLWVhc2luZz1lYXNlLW91dC1iYWNrXXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjE3NSwuODg1LC4zMiwxLjI3NSl9W2RhdGEtc2FsXVtkYXRhLXNhbC1lYXNpbmc9ZWFzZS1pbi1vdXQtYmFja117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC42OCwtLjU1LC4yNjUsMS41NSl9W2RhdGEtc2FsfD1mYWRlXXtvcGFjaXR5OjA7dHJhbnNpdGlvbi1wcm9wZXJ0eTpvcGFjaXR5fVtkYXRhLXNhbHw9ZmFkZV0uc2FsLWFuaW1hdGUsYm9keS5zYWwtZGlzYWJsZWQgW2RhdGEtc2FsfD1mYWRlXXtvcGFjaXR5OjF9W2RhdGEtc2FsfD1zbGlkZV17b3BhY2l0eTowO3RyYW5zaXRpb24tcHJvcGVydHk6b3BhY2l0eSx0cmFuc2Zvcm19W2RhdGEtc2FsPXNsaWRlLXVwXXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMCUpfVtkYXRhLXNhbD1zbGlkZS1kb3duXXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAlKX1bZGF0YS1zYWw9c2xpZGUtbGVmdF17dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAlKX1bZGF0YS1zYWw9c2xpZGUtcmlnaHRde3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMCUpfVtkYXRhLXNhbHw9c2xpZGVdLnNhbC1hbmltYXRlLGJvZHkuc2FsLWRpc2FibGVkIFtkYXRhLXNhbHw9c2xpZGVde29wYWNpdHk6MTt0cmFuc2Zvcm06bm9uZX1bZGF0YS1zYWx8PXpvb21de29wYWNpdHk6MDt0cmFuc2l0aW9uLXByb3BlcnR5Om9wYWNpdHksdHJhbnNmb3JtfVtkYXRhLXNhbD16b29tLWluXXt0cmFuc2Zvcm06c2NhbGUoLjUpfVtkYXRhLXNhbD16b29tLW91dF17dHJhbnNmb3JtOnNjYWxlKDEuMSl9W2RhdGEtc2FsfD16b29tXS5zYWwtYW5pbWF0ZSxib2R5LnNhbC1kaXNhYmxlZCBbZGF0YS1zYWx8PXpvb21de29wYWNpdHk6MTt0cmFuc2Zvcm06bm9uZX1bZGF0YS1zYWx8PWZsaXBdey13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW47YmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW47dHJhbnNpdGlvbi1wcm9wZXJ0eTp0cmFuc2Zvcm19W2RhdGEtc2FsPWZsaXAtbGVmdF17dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDIwMDBweCkgcm90YXRlWSgtOTFkZWcpfVtkYXRhLXNhbD1mbGlwLXJpZ2h0XXt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoMjAwMHB4KSByb3RhdGVZKDkxZGVnKX1bZGF0YS1zYWw9ZmxpcC11cF17dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDIwMDBweCkgcm90YXRlWCgtOTFkZWcpfVtkYXRhLXNhbD1mbGlwLWRvd25de3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSgyMDAwcHgpIHJvdGF0ZVgoOTFkZWcpfVtkYXRhLXNhbHw9ZmxpcF0uc2FsLWFuaW1hdGUsYm9keS5zYWwtZGlzYWJsZWQgW2RhdGEtc2FsfD1mbGlwXXt0cmFuc2Zvcm06bm9uZX1cIiwgXCJcIl0pO1xuIiwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NvbW1vbi5zY3NzXCIpO1xuXG5pZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbn1cblxudmFyIG9wdGlvbnMgPSB7fVxuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cblxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgaWYgKCFjb250ZW50LmxvY2Fscykge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFxuICAgICAgXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY29tbW9uLnNjc3NcIixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NvbW1vbi5zY3NzXCIpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgICAgIH1cbiAgICApXG4gIH1cblxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IFxuICAgIHVwZGF0ZSgpO1xuICB9KTtcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGd1ZCBmcm9tICdndWQnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGd1ZCgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJyArIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBsYXp5LCBTdXNwZW5zZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsIFN3aXRjaCwgUm91dGUgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IFwiLi9zYXNzL2NvbW1vbi5zY3NzXCI7XG5jb25zdCBIb21lID0gbGF6eSgoKSA9PiBpbXBvcnQoXCIuL2NvbXBvbmVudHMvSG9tZVwiKSk7XG5cbmNsYXNzIEFwcCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFN1c3BlbnNlIGZhbGxiYWNrPXtcIkxvYWRpbmcuLi5cIn0+XG4gICAgICAgIDxSb3V0ZXI+XG4gICAgICAgICAgPFN3aXRjaD5cbiAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL1wiIGNvbXBvbmVudD17SG9tZX0gLz5cbiAgICAgICAgICA8L1N3aXRjaD5cbiAgICAgICAgPC9Sb3V0ZXI+XG4gICAgICA8L1N1c3BlbnNlPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcbmltcG9ydCBBcHAgZnJvbSBcIi4vQXBwLmpzXCI7XG5cblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fID0gcmVxdWlyZShcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3NhbC5qcy9kaXN0L3NhbC5jc3NcIik7XG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJvc2FyaXZvOjQwMCw0MDBpJmRpc3BsYXk9c3dhcCk7XCJdKTtcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Sb2JvdG8mZGlzcGxheT1zd2FwKTtcIl0pO1xuZXhwb3J0cy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9RnJlZGVyaWNrYSt0aGUrR3JlYXQmZGlzcGxheT1zd2FwJnN1YnNldD1sYXRpbi1leHQpO1wiXSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImJvZHksaHRtbHttYXJnaW46MDtwYWRkaW5nOjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtib3gtc2l6aW5nOmJvcmRlci1ib3h9cHttYXJnaW46MDtwYWRkaW5nOjB9LmJ1bGxldHtoZWlnaHQ6MTBweDt3aWR0aDoxMHB4O2JhY2tncm91bmQ6IzU5MThkZjtib3JkZXItcmFkaXVzOjUwJTtib3JkZXI6MnB4IHNvbGlkIGJsYWNrO3Bvc2l0aW9uOmFic29sdXRlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3RvcDoxMyU7bGVmdDotNC40JX1cXG5cIiwgXCJcIl0pO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==